import numpy as np


class Block:
    def __init__(self):
        self.b_dict = dict()
        self.b_dict[1] = [[(0, 0)]]
        self.b_dict[2] = [[(0, 0), (1, 0)],
                          [(0, 0), (-1, 1)],
                          [(0, 0), (0, 1)],
                          [(0, 0), (1, 1)]]
        self.b_dict[3] = [[(0, 0), (1, 0), (2, 0)],
                          [(0, 0), (1, 0), (0, 1)],
                          [(0, 0), (1, 0), (1, 1)],
                          [(0, 0), (-1, 1), (0, 1)],
                          [(0, 0), (0, 1), (1, 1)],
                          [(0, 0), (-1, 1), (-2, 2)],
                          [(0, 0), (0, 1), (0, 2)],
                          [(0, 0), (1, 1), (2, 2)]]
        self.b_dict[4] = [[(0, 0), (1, 0), (2, 0), (3, 0)],
                          [(0, 0), (1, 0), (2, 0), (0, 1)],
                          [(0, 0), (1, 0), (2, 0), (1, 1)],
                          [(0, 0), (1, 0), (2, 0), (2, 1)],
                          [(0, 0), (1, 0), (-1, 1), (0, 1)],
                          [(0, 0), (1, 0), (0, 1), (1, 1)],
                          [(0, 0), (1, 0), (1, 1), (2, 1)],
                          [(0, 0), (1, 0), (0, 1), (0, 2)],
                          [(0, 0), (1, 0), (1, 1), (1, 2)],
                          [(0, 0), (-2, 1), (-1, 1), (0, 1)],
                          [(0, 0), (-1, 1), (0, 1), (1, 1)],
                          [(0, 0), (0, 1), (1, 1), (2, 1)],
                          [(0, 0), (0, 1), (-1, 1), (-1, 2)],
                          [(0, 0), (0, 1), (-1, 1), (0, 2)],
                          [(0, 0), (0, 1), (1, 1), (0, 2)],
                          [(0, 0), (0, 1), (1, 1), (1, 2)],
                          [(0, 0), (0, 1), (-1, 2), (0, 2)],
                          [(0, 0), (0, 1), (0, 2), (1, 2)],
                          [(0, 0), (0, 1), (0, 2), (0, 3)]]
        self.b_dict[5] = [[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)],
                          [(0, 0), (1, 0), (2, 0), (0, 1), (2, 1)],
                          [(0, 0), (1, 0), (2, 0), (0, 1), (0, 2)],
                          [(0, 0), (1, 0), (2, 0), (1, 1), (1, 2)],
                          [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2)],
                          [(0, 0), (2, 0), (0, 1), (1, 1), (2, 1)],
                          [(0, 0), (1, 0), (0, 1), (0, 2), (1, 2)],
                          [(0, 0), (1, 0), (1, 1), (0, 2), (1, 2)],
                          [(0, 0), (-2, 1), (-1, 1), (0, 1), (0, 2)],
                          [(0, 0), (-1, 1), (0, 1), (1, 1), (0, 2)],
                          [(0, 0), (0, 1), (1, 1), (2, 1), (0, 2)],
                          [(0, 0), (0, 1), (-2, 2), (-1, 2), (0, 2)],
                          [(0, 0), (0, 1), (-1, 2), (0, 2), (1, 2)],
                          [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2)],
                          [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)]]

        self.lens = [0, 1, 4, 8, 19, 15]
        self.block = None

    def sample(self):
        num_b = np.random.randint(1, 6)
        samples = self.b_dict[num_b]
        idx = np.random.randint(0, self.lens[num_b])
        self.block = samples[idx]

        block_code = np.sum(self.lens[:num_b]) + idx + 1
        return block_code

    def used(self):
        self.block = None


class Blockudoku:
    def __init__(self):
        self.state = {'board': np.zeros((14, 9), dtype=np.bool), 'blocks': np.zeros(3, dtype=np.int)}
        self.blocks = [Block(), Block(), Block()]

    def reset(self):
        self.obs = np.zeros((14, 9), dtype=np.int)
        for i in range(3):
            block = self.blocks[i]
            self.state['blocks'][i] = block.sample()

    def step(self, act):
        pass

